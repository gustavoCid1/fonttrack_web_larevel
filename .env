# =====================================
# ARCHIVO DE CONFIGURACIÓN DE ENTORNO
# FontTrack - Sistema de Gestión de Inventario
# =====================================
#
# Este archivo contiene todas las variables de entorno necesarias
# para el correcto funcionamiento de la aplicación FontTrack.
# 
# IMPORTANTE:
# - Este archivo NO debe ser versionado en repositorios públicos
# - Contiene información sensible como claves y credenciales
# - Cada entorno (desarrollo, producción, testing) debe tener su propio .env
# 
# @version 1.0
# @author FontTrack Team
# @date 2025

# =====================================
# CONFIGURACIÓN PRINCIPAL DE LA APLICACIÓN
# =====================================

# Nombre de la aplicación - Se usa en títulos, emails y notificaciones
APP_NAME=Laravel

# Entorno de ejecución - Controla el comportamiento de la aplicación
# Valores: local, development, staging, production
APP_ENV=local

# Clave de encriptación de la aplicación - Generada automáticamente por Laravel
# CRÍTICO: Esta clave protege sesiones, cookies y datos encriptados
# Generar nueva clave: php artisan key:generate
APP_KEY=base64:7wvf11k+XJ2e3WR4fDdNW/YdrOsUh01DlUodKgiJ7jc=

# Modo debug - Muestra errores detallados en pantalla
# IMPORTANTE: Debe ser false en producción por seguridad
APP_DEBUG=true

# URL base de la aplicación - Usada para generar enlaces absolutos
APP_URL=http://localhost

# =====================================
# CONFIGURACIÓN DEL SISTEMA DE LOGGING
# =====================================

# Canal principal para logs del sistema
# Opciones: single, daily, slack, syslog, errorlog, monolog, custom, stack
LOG_CHANNEL=stack

# Canal específico para logs de deprecaciones de Laravel
# Ayuda a identificar código que será removido en futuras versiones
LOG_DEPRECATIONS_CHANNEL=null

# Nivel mínimo de logging
# Niveles: emergency, alert, critical, error, warning, notice, info, debug
LOG_LEVEL=debug

# =====================================
# CONFIGURACIÓN DE BASE DE DATOS
# =====================================

# Tipo de conexión de base de datos
# Soporta: mysql, pgsql, sqlite, sqlsrv
DB_CONNECTION=mysql

# Dirección del servidor de base de datos
# Para desarrollo local: 127.0.0.1 o localhost
DB_HOST=127.0.0.1

# Puerto del servidor MySQL (puerto estándar: 3306)
DB_PORT=3306

# Nombre de la base de datos específica para FontTrack
DB_DATABASE=inventariofinal

# Credenciales de acceso a la base de datos
# SEGURIDAD: En producción usar credenciales con permisos limitados
DB_USERNAME=root
DB_PASSWORD=

# =====================================
# CONFIGURACIÓN DE DRIVERS Y SERVICIOS
# =====================================

# Driver para broadcasting en tiempo real
# Opciones: pusher, redis, log, null
BROADCAST_DRIVER=log

# Sistema de caché para mejorar rendimiento
# Opciones: apc, array, database, file, memcached, redis, dynamodb
CACHE_DRIVER=file

# Sistema de almacenamiento de archivos
# Opciones: local, public, s3, etc.
FILESYSTEM_DISK=local

# Sistema de colas para procesos en segundo plano
# Opciones: sync, database, beanstalkd, sqs, redis
QUEUE_CONNECTION=sync

# =====================================
# CONFIGURACIÓN DE SESIONES Y CACHE
# =====================================

# Driver para manejo de sesiones de usuario
# Opciones: file, cookie, database, apc, memcached, redis, array
SESSION_DRIVER=file

# Tiempo de vida de las sesiones en minutos (120 = 2 horas)
SESSION_LIFETIME=120

# Servidor Memcached para cache distribuido (si se usa)
MEMCACHED_HOST=127.0.0.1

# =====================================
# CONFIGURACIÓN DE REDIS
# =====================================

# Servidor Redis para cache y colas de alta performance
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

# =====================================
# CONFIGURACIÓN DEL SISTEMA DE CORREOS
# =====================================

# Protocolo para envío de emails
# Opciones: smtp, sendmail, mailgun, ses, postmark, log, array
MAIL_MAILER=smtp

# Servidor SMTP para envío de correos (Gmail en este caso)
MAIL_HOST=smtp.gmail.com

# Puerto SMTP estándar con encriptación TLS
MAIL_PORT=587

# Credenciales de la cuenta de correo del sistema
# NOTA: Para Gmail usar App Password, no la contraseña normal
MAIL_USERNAME=fonttrack.reportes@gmail.com
MAIL_PASSWORD="bwhzkgiheaaaaebb"

# Tipo de encriptación para conexión segura
# Opciones: tls, ssl, null
MAIL_ENCRYPTION=tls

# Dirección remitente por defecto para emails del sistema
MAIL_FROM_ADDRESS="fonttrack.reportes@gmail.com"

# Nombre que aparece como remitente en los emails
MAIL_FROM_NAME="FontTrack - Sistema de Reportes"

# =====================================
# CONFIGURACIÓN DE AMAZON WEB SERVICES (AWS)
# =====================================

# Credenciales de acceso a servicios AWS
# Requeridas para usar S3, SES, SQS, etc.
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# Región de AWS donde están los recursos
AWS_DEFAULT_REGION=us-east-1

# Nombre del bucket S3 para almacenamiento de archivos
AWS_BUCKET=

# Configuración del estilo de path para S3
AWS_USE_PATH_STYLE_ENDPOINT=false

# =====================================
# CONFIGURACIÓN DE PUSHER (WEBSOCKETS)
# =====================================

# Credenciales de Pusher para notificaciones en tiempo real
# Pusher permite comunicación bidireccional cliente-servidor
PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=

# Configuración del servidor Pusher
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

# =====================================
# CONFIGURACIÓN DE VITE (BUILD TOOL)
# =====================================

# Variables compartidas con el frontend compilado por Vite
# Estas variables estarán disponibles en JavaScript del cliente

# Nombre de la aplicación para el frontend
VITE_APP_NAME="${APP_NAME}"

# Configuración de Pusher para el frontend
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

# =====================================
# NOTAS IMPORTANTES DE SEGURIDAD
# =====================================
#
# 1. NUNCA subir este archivo a repositorios públicos
# 2. Usar diferentes credenciales para cada entorno
# 3. Rotar contraseñas y claves API regularmente
# 4. En producción, APP_DEBUG debe ser false
# 5. Usar HTTPS en producción (APP_URL con https://)
# 6. Configurar permisos restrictivos en el servidor
# 7. Mantener backups seguros de las configuraciones
#
# =====================================
# COMANDOS ÚTILES DE LARAVEL
# =====================================
#
# Generar nueva APP_KEY:
# php artisan key:generate
#
# Limpiar cache de configuración:
# php artisan config:clear
#
# Verificar configuración:
# php artisan config:show
#
# Migrar base de datos:
# php artisan migrate
#
# Limpiar todos los caches:
# php artisan optimize:clear